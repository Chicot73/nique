"use strict";function _typeof(o){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o})(o)}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.ScrollToPlugin=void 0;var gsap,_coreInitted,_window,_docEl,_body,_toArray,_config,ScrollTrigger,_windowExists=function(){return"undefined"!=typeof window},_getGSAP=function(){return gsap||_windowExists()&&(gsap=window.gsap)&&gsap.registerPlugin&&gsap},_isString=function(o){return"string"==typeof o},_isFunction=function(o){return"function"==typeof o},_max=function(o,t){var e="x"===t?"Width":"Height",r="scroll"+e,l="client"+e;return o===_window||o===_docEl||o===_body?Math.max(_docEl[r],_body[r])-(_window["inner"+e]||_docEl[l]||_body[l]):o[r]-o["offset"+e]},_buildGetter=function(o,t){var e="scroll"+("x"===t?"Left":"Top");return o===_window&&(null!=o.pageXOffset?e="page"+t.toUpperCase()+"Offset":o=null!=_docEl[e]?_docEl:_body),function(){return o[e]}},_clean=function(o,t,e,r){if(_isFunction(o)&&(o=o(t,e,r)),"object"!==_typeof(o))return _isString(o)&&"max"!==o&&"="!==o.charAt(1)?{x:o,y:o}:{y:o};if(o.nodeType)return{y:o,x:o};var l,n={};for(l in o)n[l]="onAutoKill"!==l&&_isFunction(o[l])?o[l](t,e,r):o[l];return n},_getOffset=function(o,t){if(!(o=_toArray(o)[0])||!o.getBoundingClientRect)return console.warn("scrollTo target doesn't exist. Using 0")||{x:0,y:0};var e=o.getBoundingClientRect(),r=!t||t===_window||t===_body,l=r?{top:_docEl.clientTop-(_window.pageYOffset||_docEl.scrollTop||_body.scrollTop||0),left:_docEl.clientLeft-(_window.pageXOffset||_docEl.scrollLeft||_body.scrollLeft||0)}:t.getBoundingClientRect(),n={x:e.left-l.left,y:e.top-l.top};return!r&&t&&(n.x+=_buildGetter(t,"x")(),n.y+=_buildGetter(t,"y")()),n},_parseVal=function(o,t,e,r,l){return isNaN(o)||"object"===_typeof(o)?_isString(o)&&"="===o.charAt(1)?parseFloat(o.substr(2))*("-"===o.charAt(0)?-1:1)+r-l:"max"===o?_max(t,e)-l:Math.min(_max(t,e),_getOffset(o,t)[e]-l):parseFloat(o)-l},_initCore=function(){gsap=_getGSAP(),_windowExists()&&gsap&&"undefined"!=typeof document&&document.body&&(_window=window,_body=document.body,_docEl=document.documentElement,_toArray=gsap.utils.toArray,gsap.config({autoKillThreshold:7}),_config=gsap.config(),_coreInitted=1)},ScrollToPlugin=exports.default=exports.ScrollToPlugin={version:"3.12.5",name:"scrollTo",rawVars:1,register:function(o){gsap=o,_initCore()},init:function(o,t,e,r,l){_coreInitted||_initCore();var n=this,i=gsap.getProperty(o,"scrollSnapType");n.isWin=o===_window,n.target=o,n.tween=e,t=_clean(t,r,o,l),n.vars=t,n.autoKill=!!t.autoKill,n.getX=_buildGetter(o,"x"),n.getY=_buildGetter(o,"y"),n.x=n.xPrev=n.getX(),n.y=n.yPrev=n.getY(),ScrollTrigger||(ScrollTrigger=gsap.core.globals().ScrollTrigger),"smooth"===gsap.getProperty(o,"scrollBehavior")&&gsap.set(o,{scrollBehavior:"auto"}),i&&"none"!==i&&(n.snap=1,n.snapInline=o.style.scrollSnapType,o.style.scrollSnapType="none"),null!=t.x?(n.add(n,"x",n.x,_parseVal(t.x,o,"x",n.x,t.offsetX||0),r,l),n._props.push("scrollTo_x")):n.skipX=1,null!=t.y?(n.add(n,"y",n.y,_parseVal(t.y,o,"y",n.y,t.offsetY||0),r,l),n._props.push("scrollTo_y")):n.skipY=1},render:function(o,t){for(var e,r,l,n,i,s=t._pt,p=t.target,c=t.tween,a=t.autoKill,u=t.xPrev,_=t.yPrev,f=t.isWin,g=t.snap,d=t.snapInline;s;)s.r(o,s.d),s=s._next;e=f||!t.skipX?t.getX():u,l=(r=f||!t.skipY?t.getY():_)-_,n=e-u,i=_config.autoKillThreshold,t.x<0&&(t.x=0),t.y<0&&(t.y=0),a&&(!t.skipX&&(i<n||n<-i)&&e<_max(p,"x")&&(t.skipX=1),!t.skipY&&(i<l||l<-i)&&r<_max(p,"y")&&(t.skipY=1),t.skipX&&t.skipY&&(c.kill(),t.vars.onAutoKill&&t.vars.onAutoKill.apply(c,t.vars.onAutoKillParams||[]))),f?_window.scrollTo(t.skipX?e:t.x,t.skipY?r:t.y):(t.skipY||(p.scrollTop=t.y),t.skipX||(p.scrollLeft=t.x)),!g||1!==o&&0!==o||(r=p.scrollTop,e=p.scrollLeft,d?p.style.scrollSnapType=d:p.style.removeProperty("scroll-snap-type"),p.scrollTop=r+1,p.scrollLeft=e+1,p.scrollTop=r,p.scrollLeft=e),t.xPrev=t.x,t.yPrev=t.y,ScrollTrigger&&ScrollTrigger.update()},kill:function(o){var t="scrollTo"===o,e=this._props.indexOf(o);return(t||"scrollTo_x"===o)&&(this.skipX=1),(t||"scrollTo_y"===o)&&(this.skipY=1),-1<e&&this._props.splice(e,1),!this._props.length}};ScrollToPlugin.max=_max,ScrollToPlugin.getOffset=_getOffset,ScrollToPlugin.buildGetter=_buildGetter,_getGSAP()&&gsap.registerPlugin(ScrollToPlugin);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,