"use strict";function restaurantFn(){document.querySelector(".restaurant__dummy").scrollIntoView({block:"start",behavior:"smooth"})}function restaurantFn2(){document.location.replace("index.html"),document.querySelector(".restaurant__dummy").scrollIntoView({block:"start",behavior:"smooth"})}function menuFn(){document.querySelector(".menu__dummy").scrollIntoView({block:"start",behavior:"smooth"})}function menuFn2(){document.location.replace("index.html"),document.querySelector(".menu__dummy").scrollIntoView({block:"start",behavior:"smooth"})}function classesFn(){document.querySelector(".classes__dummy").scrollIntoView({block:"start",behavior:"smooth"})}function menuup01Fn(){document.getElementById("starters").scrollIntoView({block:"start",behavior:"smooth"})}function menuup02Fn(){document.getElementById("breakfast").scrollIntoView({block:"start",behavior:"smooth"})}function menuup03Fn(){document.getElementById("dinner").scrollIntoView({block:"start",behavior:"smooth"})}function menuup04Fn(){document.getElementById("drinks").scrollIntoView({block:"start",behavior:"smooth"})}window.addEventListener("DOMContentLoaded",function(){document.querySelector("body");var y=document.querySelector(".mouse"),p=0;onwheel=function(e){window.onscroll=function(e){var t=window.scrollY,o=document.querySelector(".restaurant__dummy"),n=document.getElementById("restaurant-span"),r=document.querySelector(".menu__dummy"),u=document.getElementById("dinner"),c=document.getElementById("drinks"),l=o.getBoundingClientRect().top,s=n.getBoundingClientRect().bottom,d=r.getBoundingClientRect().top,m=u.getBoundingClientRect().bottom,i=c.getBoundingClientRect().bottom;if(p<t){var a=document.getElementById("downmenu");a.classList.remove("hide"),a.classList.add("show"),y.style.opacity=0,clearInterval(_,1500),s<=0&&document.querySelector(".logo").classList.add("logo__onleft"),l<=0&&(document.querySelector(".menu__img").style.display="block"),d<=0&&(document.querySelector(".menuup").classList.add("menuup__sticky"),document.querySelector(".menu__wrapper").style.paddingTop="8.4rem",document.getElementById("menu").classList.add("title-fixed")),m<=0&&(document.getElementById("menu").classList.remove("title-fixed"),document.getElementById("menu").style.top="249rem"),i<=0&&(document.querySelector(".menuup").classList.remove("menuup__sticky"),document.querySelector(".menu__wrapper").style.paddingTop=0,document.querySelector(".logo").classList.remove("logo__onleft"))}else t<p&&(0<=i&&(document.querySelector(".menuup").classList.add("menuup__sticky"),document.querySelector(".menu__wrapper").style.paddingTop="8.4rem",document.querySelector(".logo").classList.add("logo__onleft")),0<=m&&(document.getElementById("menu").classList.add("title-fixed"),document.getElementById("menu").style.top="37rem"),0<=d&&(document.querySelector(".menuup").classList.remove("menuup__sticky"),document.querySelector(".menu__wrapper").style.paddingTop=0,document.getElementById("menu").classList.remove("title-fixed")),0<=l&&(document.querySelector(".menu__img").style.display="none"),0<=s&&document.querySelector(".logo").classList.remove("logo__onleft"));p=t<=0?0:t}()},scroll=function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}(function(e){onwheel(e),window.removeEventListener("scroll",scroll)}),window.addEventListener("scroll",scroll,!0);var e=document.getElementById("clocks"),t=e.childNodes,o=e||t;o.addEventListener("mouseover",function(){var e=document.getElementById("times");e.classList.remove("hidden"),e.classList.add("active")}),o.addEventListener("mouseout",function(){var e=document.getElementById("times");e.classList.remove("active"),e.classList.add("hidden")});new Swiper(".myswiper",{autoplay:{delay:2500},speed:1e3,loop:!0,freeMode:!0,slidesPerView:"auto",centeredSlides:!0,spaceBetween:0,grabCursor:!0}),new Swiper(".myswiper2",{autoplay:{delay:2500},speed:1e3,loop:!0,freeMode:!0,slidesPerView:"auto",centeredSlides:!0,spaceBetween:0,grabCursor:!0});document.querySelector(".menu");var _=setInterval(function(){y.style.opacity=1,setTimeout(function(){y.classList.add("mouse__active")},750),y.classList.remove("mouse__active")},1500)});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,