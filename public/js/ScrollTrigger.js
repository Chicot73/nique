"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.ScrollTrigger=void 0;var _Observer=require("./Observer.js");function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,r){for(var t=0;t<r.length;t++){var i=r[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,_toPropertyKey(i.key),i)}}function _createClass(e,r,t){return r&&_defineProperties(e.prototype,r),t&&_defineProperties(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function _toPropertyKey(e){var r=_toPrimitive(e,"string");return"symbol"===_typeof(r)?r:String(r)}function _toPrimitive(e,r){if("object"!==_typeof(e)||null===e)return e;var t=e[Symbol.toPrimitive];if(void 0===t)return("string"===r?String:Number)(e);var i=t.call(e,r||"default");if("object"!==_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var gsap,_coreInitted,_win,_doc,_docEl,_body,_root,_resizeDelay,_toArray,_clamp,_time2,_syncInterval,_refreshing,_pointerIsDown,_transformProp,_i,_prevWidth,_prevHeight,_autoRefresh,_sort,_suppressOverwrites,_ignoreResize,_normalizer,_ignoreMobileResize,_baseScreenHeight,_baseScreenWidth,_fixIOSBug,_context,_scrollRestoration,_div100vh,_100vh,_isReverted,_clampingMax,_limitCallbacks,_rafID,_refreshingAll,_queueRefreshID,_primary,_startup=1,_getTime=Date.now,_time1=_getTime(),_lastScrollTime=0,_enabled=0,_parseClamp=function(e,r,t){var i=_isString(e)&&("clamp("===e.substr(0,6)||-1<e.indexOf("max"));return(t["_"+r+"Clamp"]=i)?e.substr(6,e.length-7):e},_keepClamp=function(e,r){return!r||_isString(e)&&"clamp("===e.substr(0,6)?e:"clamp("+e+")"},_rafBugFix=function e(){return _enabled&&requestAnimationFrame(e)},_pointerDownHandler=function(){return _pointerIsDown=1},_pointerUpHandler=function(){return _pointerIsDown=0},_passThrough=function(e){return e},_round=function(e){return Math.round(1e5*e)/1e5||0},_windowExists=function(){return"undefined"!=typeof window},_getGSAP=function(){return gsap||_windowExists()&&(gsap=window.gsap)&&gsap.registerPlugin&&gsap},_isViewport=function(e){return!!~_root.indexOf(e)},_getViewportDimension=function(e){return("Height"===e?_100vh:_win["inner"+e])||_docEl["client"+e]||_body["client"+e]},_getBoundsFunc=function(e){return(0,_Observer._getProxyProp)(e,"getBoundingClientRect")||(_isViewport(e)?function(){return _winOffsets.width=_win.innerWidth,_winOffsets.height=_100vh,_winOffsets}:function(){return _getBounds(e)})},_getSizeFunc=function(e,r,t){var i=t.d,n=t.d2,o=t.a;return(o=(0,_Observer._getProxyProp)(e,"getBoundingClientRect"))?function(){return o()[i]}:function(){return(r?_getViewportDimension(n):e["client"+n])||0}},_getOffsetsFunc=function(e,r){return!r||~_Observer._proxies.indexOf(e)?_getBoundsFunc(e):function(){return _winOffsets}},_maxScroll=function(e,r){var t=r.s,i=r.d2,n=r.d,o=r.a;return Math.max(0,(t="scroll"+i)&&(o=(0,_Observer._getProxyProp)(e,t))?o()-_getBoundsFunc(e)()[n]:_isViewport(e)?(_docEl[t]||_body[t])-_getViewportDimension(i):e[t]-e["offset"+i])},_iterateAutoRefresh=function(e,r){for(var t=0;t<_autoRefresh.length;t+=3)(!r||~r.indexOf(_autoRefresh[t+1]))&&e(_autoRefresh[t],_autoRefresh[t+1],_autoRefresh[t+2])},_isString=function(e){return"string"==typeof e},_isFunction=function(e){return"function"==typeof e},_isNumber=function(e){return"number"==typeof e},_isObject=function(e){return"object"===_typeof(e)},_endAnimation=function(e,r,t){return e&&e.progress(r?0:1)&&t&&e.pause()},_callback=function(e,r){if(e.enabled){var t=e._ctx?e._ctx.add(function(){return r(e)}):r(e);t&&t.totalTime&&(e.callbackAnimation=t)}},_abs=Math.abs,_left="left",_top="top",_right="right",_bottom="bottom",_width="width",_height="height",_Right="Right",_Left="Left",_Top="Top",_Bottom="Bottom",_padding="padding",_margin="margin",_Width="Width",_Height="Height",_px="px",_getComputedStyle=function(e){return _win.getComputedStyle(e)},_makePositionable=function(e){var r=_getComputedStyle(e).position;e.style.position="absolute"===r||"fixed"===r?r:"relative"},_setDefaults=function(e,r){for(var t in r)t in e||(e[t]=r[t]);return e},_getBounds=function(e,r){var t=r&&"matrix(1, 0, 0, 1, 0, 0)"!==_getComputedStyle(e)[_transformProp]&&gsap.to(e,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),i=e.getBoundingClientRect();return t&&t.progress(0).kill(),i},_getSize=function(e,r){var t=r.d2;return e["offset"+t]||e["client"+t]||0},_getLabelRatioArray=function(e){var r,t=[],i=e.labels,n=e.duration();for(r in i)t.push(i[r]/n);return t},_getClosestLabel=function(r){return function(e){return gsap.utils.snap(_getLabelRatioArray(r),e)}},_snapDirectional=function(n){var o=gsap.utils.snap(n),s=Array.isArray(n)&&n.slice(0).sort(function(e,r){return e-r});return s?function(e,r){var t,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:.001;if(!r)return o(e);if(0<r){for(e-=i,t=0;t<s.length;t++)if(s[t]>=e)return s[t];return s[t-1]}for(t=s.length,e+=i;t--;)if(s[t]<=e)return s[t];return s[0]}:function(e,r){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:.001,i=o(e);return!r||Math.abs(i-e)<t||i-e<0==r<0?i:o(r<0?e-n:e+n)}},_getLabelAtDirection=function(t){return function(e,r){return _snapDirectional(_getLabelRatioArray(t))(e,r.direction)}},_multiListener=function(r,t,e,i){return e.split(",").forEach(function(e){return r(t,e,i)})},_addListener=function(e,r,t,i,n){return e.addEventListener(r,t,{passive:!i,capture:!!n})},_removeListener=function(e,r,t,i){return e.removeEventListener(r,t,!!i)},_wheelListener=function(e,r,t){(t=t&&t.wheelHandler)&&(e(r,"wheel",t),e(r,"touchmove",t))},_markerDefaults={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},_defaults={toggleActions:"play",anticipatePin:0},_keywords={top:0,left:0,center:.5,bottom:1,right:1},_offsetToPx=function(e,r){if(_isString(e)){var t=e.indexOf("="),i=~t?+(e.charAt(t-1)+1)*parseFloat(e.substr(t+1)):0;~t&&(e.indexOf("%")>t&&(i*=r/100),e=e.substr(0,t-1)),e=i+(e in _keywords?_keywords[e]*r:~e.indexOf("%")?parseFloat(e)*r/100:parseFloat(e)||0)}return e},_createMarker=function(e,r,t,i,n,o,s,a){var l=n.startColor,_=n.endColor,c=n.fontSize,u=n.indent,p=n.fontWeight,g=_doc.createElement("div"),d=_isViewport(t)||"fixed"===(0,_Observer._getProxyProp)(t,"pinType"),f=-1!==e.indexOf("scroller"),h=d?_body:t,v=-1!==e.indexOf("start"),m=v?l:_,b="border-color:"+m+";font-size:"+c+";color:"+m+";font-weight:"+p+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return b+="position:"+((f||a)&&d?"fixed;":"absolute;"),(f||a||!d)&&(b+=(i===_Observer._vertical?_right:_bottom)+":"+(o+parseFloat(u))+"px;"),s&&(b+="box-sizing:border-box;text-align:left;width:"+s.offsetWidth+"px;"),g._isStart=v,g.setAttribute("class","gsap-marker-"+e+(r?" marker-"+r:"")),g.style.cssText=b,g.innerText=r||0===r?e+"-"+r:e,h.children[0]?h.insertBefore(g,h.children[0]):h.appendChild(g),g._offset=g["offset"+i.op.d2],_positionMarker(g,0,i,v),g},_positionMarker=function(e,r,t,i){var n={display:"block"},o=t[i?"os2":"p2"],s=t[i?"p2":"os2"];e._isFlipped=i,n[t.a+"Percent"]=i?-100:0,n[t.a]=i?"1px":0,n["border"+o+_Width]=1,n["border"+s+_Width]=0,n[t.p]=r+"px",gsap.set(e,n)},_triggers=[],_ids={},_sync=function(){return 34<_getTime()-_lastScrollTime&&(_rafID||(_rafID=requestAnimationFrame(_updateAll)))},_onScroll=function(){(!_normalizer||!_normalizer.isPressed||_normalizer.startX>_body.clientWidth)&&(_Observer._scrollers.cache++,_normalizer?_rafID||(_rafID=requestAnimationFrame(_updateAll)):_updateAll(),_lastScrollTime||_dispatch("scrollStart"),_lastScrollTime=_getTime())},_setBaseDimensions=function(){_baseScreenWidth=_win.innerWidth,_baseScreenHeight=_win.innerHeight},_onResize=function(){_Observer._scrollers.cache++,!_refreshing&&!_ignoreResize&&!_doc.fullscreenElement&&!_doc.webkitFullscreenElement&&(!_ignoreMobileResize||_baseScreenWidth!==_win.innerWidth||Math.abs(_win.innerHeight-_baseScreenHeight)>.25*_win.innerHeight)&&_resizeDelay.restart(!0)},_listeners={},_emptyArray=[],_softRefresh=function e(){return _removeListener(ScrollTrigger,"scrollEnd",e)||_refreshAll(!0)},_dispatch=function(e){return _listeners[e]&&_listeners[e].map(function(e){return e()})||_emptyArray},_savedStyles=[],_revertRecorded=function(e){for(var r=0;r<_savedStyles.length;r+=5)(!e||_savedStyles[r+4]&&_savedStyles[r+4].query===e)&&(_savedStyles[r].style.cssText=_savedStyles[r+1],_savedStyles[r].getBBox&&_savedStyles[r].setAttribute("transform",_savedStyles[r+2]||""),_savedStyles[r+3].uncache=1)},_revertAll=function(e,r){var t;for(_i=0;_i<_triggers.length;_i++)!(t=_triggers[_i])||r&&t._ctx!==r||(e?t.kill(1):t.revert(!0,!0));_isReverted=!0,r&&_revertRecorded(r),r||_dispatch("revert")},_clearScrollMemory=function(e,r){_Observer._scrollers.cache++,(r||!_refreshingAll)&&_Observer._scrollers.forEach(function(e){return _isFunction(e)&&e.cacheID++&&(e.rec=0)}),_isString(e)&&(_win.history.scrollRestoration=_scrollRestoration=e)},_refreshID=0,_queueRefreshAll=function(){if(_queueRefreshID!==_refreshID){var e=_queueRefreshID=_refreshID;requestAnimationFrame(function(){return e===_refreshID&&_refreshAll(!0)})}},_refresh100vh=function(){_body.appendChild(_div100vh),_100vh=!_normalizer&&_div100vh.offsetHeight||_win.innerHeight,_body.removeChild(_div100vh)},_hideAllMarkers=function(r){return _toArray(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach(function(e){return e.style.display=r?"none":"block"})},_refreshAll=function(e,r){if(!_lastScrollTime||e||_isReverted){_refresh100vh(),_refreshingAll=ScrollTrigger.isRefreshing=!0,_Observer._scrollers.forEach(function(e){return _isFunction(e)&&++e.cacheID&&(e.rec=e())});var t=_dispatch("refreshInit");_sort&&ScrollTrigger.sort(),r||_revertAll(),_Observer._scrollers.forEach(function(e){_isFunction(e)&&(e.smooth&&(e.target.style.scrollBehavior="auto"),e(0))}),_triggers.slice(0).forEach(function(e){return e.refresh()}),_isReverted=!1,_triggers.forEach(function(e){if(e._subPinOffset&&e.pin){var r=e.vars.horizontal?"offsetWidth":"offsetHeight",t=e.pin[r];e.revert(!0,1),e.adjustPinSpacing(e.pin[r]-t),e.refresh()}}),_clampingMax=1,_hideAllMarkers(!0),_triggers.forEach(function(e){var r=_maxScroll(e.scroller,e._dir),t="max"===e.vars.end||e._endClamp&&e.end>r,i=e._startClamp&&e.start>=r;(t||i)&&e.setPositions(i?r-1:e.start,t?Math.max(i?r:e.start+1,r):e.end,!0)}),_hideAllMarkers(!1),_clampingMax=0,t.forEach(function(e){return e&&e.render&&e.render(-1)}),_Observer._scrollers.forEach(function(e){_isFunction(e)&&(e.smooth&&requestAnimationFrame(function(){return e.target.style.scrollBehavior="smooth"}),e.rec&&e(e.rec))}),_clearScrollMemory(_scrollRestoration,1),_resizeDelay.pause(),_refreshID++,_updateAll(_refreshingAll=2),_triggers.forEach(function(e){return _isFunction(e.vars.onRefresh)&&e.vars.onRefresh(e)}),_refreshingAll=ScrollTrigger.isRefreshing=!1,_dispatch("refresh")}else _addListener(ScrollTrigger,"scrollEnd",_softRefresh)},_lastScroll=0,_direction=1,_updateAll=function(e){if(2===e||!_refreshingAll&&!_isReverted){ScrollTrigger.isUpdating=!0,_primary&&_primary.update(0);var r=_triggers.length,t=_getTime(),i=50<=t-_time1,n=r&&_triggers[0].scroll();if(_direction=n<_lastScroll?-1:1,_refreshingAll||(_lastScroll=n),i&&(_lastScrollTime&&!_pointerIsDown&&200<t-_lastScrollTime&&(_lastScrollTime=0,_dispatch("scrollEnd")),_time2=_time1,_time1=t),_direction<0){for(_i=r;0<_i--;)_triggers[_i]&&_triggers[_i].update(0,i);_direction=1}else for(_i=0;_i<r;_i++)_triggers[_i]&&_triggers[_i].update(0,i);ScrollTrigger.isUpdating=!1}_rafID=0},_propNamesToCopy=[_left,_top,_bottom,_right,_margin+_Bottom,_margin+_Right,_margin+_Top,_margin+_Left,"display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],_stateProps=_propNamesToCopy.concat([_width,_height,"boxSizing","max"+_Width,"max"+_Height,"position",_margin,_padding,_padding+_Top,_padding+_Right,_padding+_Bottom,_padding+_Left]),_swapPinOut=function(e,r,t){_setState(t);var i=e._gsap;if(i.spacerIsNative)_setState(i.spacerState);else if(e._gsap.swappedIn){var n=r.parentNode;n&&(n.insertBefore(e,r),n.removeChild(r))}e._gsap.swappedIn=!1},_swapPinIn=function(e,r,t,i){if(!e._gsap.swappedIn){for(var n,o=_propNamesToCopy.length,s=r.style,a=e.style;o--;)s[n=_propNamesToCopy[o]]=t[n];s.position="absolute"===t.position?"absolute":"relative","inline"===t.display&&(s.display="inline-block"),a[_bottom]=a[_right]="auto",s.flexBasis=t.flexBasis||"auto",s.overflow="visible",s.boxSizing="border-box",s[_width]=_getSize(e,_Observer._horizontal)+_px,s[_height]=_getSize(e,_Observer._vertical)+_px,s[_padding]=a[_margin]=a[_top]=a[_left]="0",_setState(i),a[_width]=a["max"+_Width]=t[_width],a[_height]=a["max"+_Height]=t[_height],a[_padding]=t[_padding],e.parentNode!==r&&(e.parentNode.insertBefore(r,e),r.appendChild(e)),e._gsap.swappedIn=!0}},_capsExp=/([A-Z])/g,_setState=function(e){if(e){var r,t,i=e.t.style,n=e.length,o=0;for((e.t._gsap||gsap.core.getCache(e.t)).uncache=1;o<n;o+=2)t=e[o+1],r=e[o],t?i[r]=t:i[r]&&i.removeProperty(r.replace(_capsExp,"-$1").toLowerCase())}},_getState=function(e){for(var r=_stateProps.length,t=e.style,i=[],n=0;n<r;n++)i.push(_stateProps[n],t[_stateProps[n]]);return i.t=e,i},_copyState=function(e,r,t){for(var i,n=[],o=e.length,s=t?8:0;s<o;s+=2)i=e[s],n.push(i,i in r?r[i]:e[s+1]);return n.t=e.t,n},_winOffsets={left:0,top:0},_parsePosition=function(e,r,t,i,n,o,s,a,l,_,c,u,p,g){_isFunction(e)&&(e=e(a)),_isString(e)&&"max"===e.substr(0,3)&&(e=u+("="===e.charAt(4)?_offsetToPx("0"+e.substr(3),t):0));var d,f,h,v=p?p.time():0;if(p&&p.seek(0),isNaN(e)||(e=+e),_isNumber(e))p&&(e=gsap.utils.mapRange(p.scrollTrigger.start,p.scrollTrigger.end,0,u,e)),s&&_positionMarker(s,t,i,!0);else{_isFunction(r)&&(r=r(a));var m,b,y,S,w=(e||"0").split(" ");h=(0,_Observer._getTarget)(r,a)||_body,(m=_getBounds(h)||{})&&(m.left||m.top)||"none"!==_getComputedStyle(h).display||(S=h.style.display,h.style.display="block",m=_getBounds(h),S?h.style.display=S:h.style.removeProperty("display")),b=_offsetToPx(w[0],m[i.d]),y=_offsetToPx(w[1]||"0",t),e=m[i.p]-l[i.p]-_+b+n-y,s&&_positionMarker(s,y,i,t-y<20||s._isStart&&20<y),t-=t-y}if(g&&(a[g]=e||-.001,e<0&&(e=0)),o){var x=e+t,O=o._isStart;d="scroll"+i.d2,_positionMarker(o,x,i,O&&20<x||!O&&(c?Math.max(_body[d],_docEl[d]):o.parentNode[d])<=x+1),c&&(l=_getBounds(s),c&&(o.style[i.op.p]=l[i.op.p]-i.op.m-o._offset+_px))}return p&&h&&(d=_getBounds(h),p.seek(u),f=_getBounds(h),p._caScrollDist=d[i.p]-f[i.p],e=e/p._caScrollDist*u),p&&p.seek(v),p?e:Math.round(e)},_prefixExp=/(webkit|moz|length|cssText|inset)/i,_reparent=function(e,r,t,i){if(e.parentNode!==r){var n,o,s=e.style;if(r===_body){for(n in e._stOrig=s.cssText,o=_getComputedStyle(e))+n||_prefixExp.test(n)||!o[n]||"string"!=typeof s[n]||"0"===n||(s[n]=o[n]);s.top=t,s.left=i}else s.cssText=e._stOrig;gsap.core.getCache(e).uncache=1,r.appendChild(e)}},_interruptionTracker=function(t,e,i){var n=e,o=n;return function(e){var r=Math.round(t());return r!==n&&r!==o&&3<Math.abs(r-n)&&3<Math.abs(r-o)&&(e=r,i&&i()),o=n,n=e}},_shiftMarker=function(e,r,t){var i={};i[r.p]="+="+t,gsap.set(e,i)},_getTweenCreator=function(c,e){var u=(0,_Observer._getScrollFunc)(c,e),p="_scroll"+e.p2,r=function e(r,t,i,n,o){var s=e.tween,a=t.onComplete,l={};i=i||u();var _=_interruptionTracker(u,i,function(){s.kill(),e.tween=0});return o=n&&o||0,n=n||r-i,s&&s.kill(),t[p]=r,t.inherit=!1,(t.modifiers=l)[p]=function(){return _(i+n*s.ratio+o*s.ratio*s.ratio)},t.onUpdate=function(){_Observer._scrollers.cache++,e.tween&&_updateAll()},t.onComplete=function(){e.tween=0,a&&a.call(s)},s=e.tween=gsap.to(c,t)};return(c[p]=u).wheelHandler=function(){return r.tween&&r.tween.kill()&&(r.tween=0)},_addListener(c,"wheel",u.wheelHandler),ScrollTrigger.isTouch&&_addListener(c,"touchmove",u.wheelHandler),r},ScrollTrigger=exports.default=exports.ScrollTrigger=function(){function Re(e,r){_classCallCheck(this,Re),_coreInitted||Re.register(gsap)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),_context(this),this.init(e,r)}return _createClass(Re,[{key:"init",value:function(C,R){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),_enabled){var z,i,d,E,I,L,M,D,B,F,N,e,H,W,V,j,q,U,r,Y,v,X,G,m,K,b,Z,y,t,S,w,$,n,f,J,Q,ee,x,o,s=C=_setDefaults(_isString(C)||_isNumber(C)||C.nodeType?{trigger:C}:C,_defaults),O=s.onUpdate,T=s.toggleClass,a=s.id,k=s.onToggle,re=s.onRefresh,A=s.scrub,te=s.trigger,ie=s.pin,ne=s.pinSpacing,oe=s.invalidateOnRefresh,P=s.anticipatePin,l=s.onScrubComplete,h=s.onSnapComplete,se=s.once,ae=s.snap,le=s.pinReparent,_=s.pinSpacer,_e=s.containerAnimation,ce=s.fastScrollEnd,ue=s.preventOverlaps,pe=C.horizontal||C.containerAnimation&&!1!==C.horizontal?_Observer._horizontal:_Observer._vertical,ge=!A&&0!==A,de=(0,_Observer._getTarget)(C.scroller||_win),c=gsap.core.getCache(de),fe=_isViewport(de),he="fixed"===("pinType"in C?C.pinType:(0,_Observer._getProxyProp)(de,"pinType")||fe&&"fixed"),ve=[C.onEnter,C.onLeave,C.onEnterBack,C.onLeaveBack],me=ge&&C.toggleActions.split(" "),be="markers"in C?C.markers:_defaults.markers,ye=fe?0:parseFloat(_getComputedStyle(de)["border"+pe.p2+_Width])||0,Se=this,we=C.onRefreshInit&&function(){return C.onRefreshInit(Se)},xe=_getSizeFunc(de,fe,pe),Oe=_getOffsetsFunc(de,fe),Te=0,ke=0,Ae=0,Pe=(0,_Observer._getScrollFunc)(de,pe);if(Se._startClamp=Se._endClamp=!1,Se._dir=pe,P*=45,Se.scroller=de,Se.scroll=_e?_e.time.bind(_e):Pe,E=Pe(),Se.vars=C,R=R||C.animation,"refreshPriority"in C&&(_sort=1,-9999===C.refreshPriority&&(_primary=Se)),c.tweenScroll=c.tweenScroll||{top:_getTweenCreator(de,_Observer._vertical),left:_getTweenCreator(de,_Observer._horizontal)},Se.tweenTo=z=c.tweenScroll[pe.p],Se.scrubDuration=function(e){(n=_isNumber(e)&&e)?$?$.duration(e):$=gsap.to(R,{ease:"expo",totalProgress:"+=0",inherit:!1,duration:n,paused:!0,onComplete:function(){return l&&l(Se)}}):($&&$.progress(1).kill(),$=0)},R&&(R.vars.lazy=!1,R._initted&&!Se.isReverted||!1!==R.vars.immediateRender&&!1!==C.immediateRender&&R.duration()&&R.render(0,!0,!0),Se.animation=R.pause(),(R.scrollTrigger=Se).scrubDuration(A),S=0,a||(a=R.vars.id)),ae&&(_isObject(ae)&&!ae.push||(ae={snapTo:ae}),"scrollBehavior"in _body.style&&gsap.set(fe?[_body,_docEl]:de,{scrollBehavior:"auto"}),_Observer._scrollers.forEach(function(e){return _isFunction(e)&&e.target===(fe?_doc.scrollingElement||_docEl:de)&&(e.smooth=!1)}),d=_isFunction(ae.snapTo)?ae.snapTo:"labels"===ae.snapTo?_getClosestLabel(R):"labelsDirectional"===ae.snapTo?_getLabelAtDirection(R):!1!==ae.directional?function(e,r){return _snapDirectional(ae.snapTo)(e,_getTime()-ke<500?0:r.direction)}:gsap.utils.snap(ae.snapTo),f=ae.duration||{min:.1,max:2},f=_isObject(f)?_clamp(f.min,f.max):_clamp(f,f),J=gsap.delayedCall(ae.delay||n/2||.1,function(){var e=Pe(),r=_getTime()-ke<500,t=z.tween;if(!(r||Math.abs(Se.getVelocity())<10)||t||_pointerIsDown||Te===e)Se.isActive&&Te!==e&&J.restart(!0);else{var i,n,o=(e-L)/W,s=R&&!ge?R.totalProgress():o,a=r?0:(s-w)/(_getTime()-_time2)*1e3||0,l=gsap.utils.clamp(-o,1-o,_abs(a/2)*a/.185),_=o+(!1===ae.inertia?0:l),c=ae,u=c.onStart,p=c.onInterrupt,g=c.onComplete;if(i=d(_,Se),_isNumber(i)||(i=_),n=Math.round(L+i*W),e<=M&&L<=e&&n!==e){if(t&&!t._initted&&t.data<=_abs(n-e))return;!1===ae.inertia&&(l=i-o),z(n,{duration:f(_abs(.185*Math.max(_abs(_-s),_abs(i-s))/a/.05||0)),ease:ae.ease||"power3",data:_abs(n-e),onInterrupt:function(){return J.restart(!0)&&p&&p(Se)},onComplete:function(){Se.update(),Te=Pe(),R&&($?$.resetTo("totalProgress",i,R._tTime/R._tDur):R.progress(i)),S=w=R&&!ge?R.totalProgress():Se.progress,h&&h(Se),g&&g(Se)}},e,l*W,n-e-l*W),u&&u(Se,z.tween)}}}).pause()),a&&(_ids[a]=Se),(o=(te=Se.trigger=(0,_Observer._getTarget)(te||!0!==ie&&ie))&&te._gsap&&te._gsap.stRevert)&&(o=o(Se)),ie=!0===ie?te:(0,_Observer._getTarget)(ie),_isString(T)&&(T={targets:te,className:T}),ie&&(!1===ne||ne===_margin||(ne=!(!ne&&ie.parentNode&&ie.parentNode.style&&"flex"===_getComputedStyle(ie.parentNode).display)&&_padding),Se.pin=ie,(i=gsap.core.getCache(ie)).spacer?V=i.pinState:(_&&((_=(0,_Observer._getTarget)(_))&&!_.nodeType&&(_=_.current||_.nativeElement),i.spacerIsNative=!!_,_&&(i.spacerState=_getState(_))),i.spacer=U=_||_doc.createElement("div"),U.classList.add("pin-spacer"),a&&U.classList.add("pin-spacer-"+a),i.pinState=V=_getState(ie)),!1!==C.force3D&&gsap.set(ie,{force3D:!0}),Se.spacer=U=i.spacer,t=_getComputedStyle(ie),m=t[ne+pe.os2],Y=gsap.getProperty(ie),v=gsap.quickSetter(ie,pe.a,_px),_swapPinIn(ie,U,t),q=_getState(ie)),be){e=_isObject(be)?_setDefaults(be,_markerDefaults):_markerDefaults,F=_createMarker("scroller-start",a,de,pe,e,0),N=_createMarker("scroller-end",a,de,pe,e,0,F),r=F["offset"+pe.op.d2];var u=(0,_Observer._getTarget)((0,_Observer._getProxyProp)(de,"content")||de);D=this.markerStart=_createMarker("start",a,u,pe,e,r,0,_e),B=this.markerEnd=_createMarker("end",a,u,pe,e,r,0,_e),_e&&(x=gsap.quickSetter([D,B],pe.a,_px)),he||_Observer._proxies.length&&!0===(0,_Observer._getProxyProp)(de,"fixedMarkers")||(_makePositionable(fe?_body:de),gsap.set([F,N],{force3D:!0}),b=gsap.quickSetter(F,pe.a,_px),y=gsap.quickSetter(N,pe.a,_px))}if(_e){var p=_e.vars.onUpdate,g=_e.vars.onUpdateParams;_e.eventCallback("onUpdate",function(){Se.update(0,0,1),p&&p.apply(_e,g||[])})}if(Se.previous=function(){return _triggers[_triggers.indexOf(Se)-1]},Se.next=function(){return _triggers[_triggers.indexOf(Se)+1]},Se.revert=function(e,r){if(!r)return Se.kill(!0);var t=!1!==e||!Se.enabled,i=_refreshing;t!==Se.isReverted&&(t&&(Q=Math.max(Pe(),Se.scroll.rec||0),Ae=Se.progress,ee=R&&R.progress()),D&&[D,B,F,N].forEach(function(e){return e.style.display=t?"none":"block"}),t&&(_refreshing=Se).update(t),!ie||le&&Se.isActive||(t?_swapPinOut(ie,U,V):_swapPinIn(ie,U,_getComputedStyle(ie),K)),t||Se.update(t),_refreshing=i,Se.isReverted=t)},Se.refresh=function(e,r,t,i){if(!_refreshing&&Se.enabled||r)if(ie&&e&&_lastScrollTime)_addListener(Re,"scrollEnd",_softRefresh);else{!_refreshingAll&&we&&we(Se),_refreshing=Se,z.tween&&!t&&(z.tween.kill(),z.tween=0),$&&$.pause(),oe&&R&&R.revert({kill:!1}).invalidate(),Se.isReverted||Se.revert(!0,!0),Se._subPinOffset=!1;var n,o,s,a,l,_,c,u,p,g,d,f,h,v=xe(),m=Oe(),b=_e?_e.duration():_maxScroll(de,pe),y=W<=.01,S=0,w=i||0,x=_isObject(t)?t.end:C.end,O=C.endTrigger||te,T=_isObject(t)?t.start:C.start||(0!==C.start&&te?ie?"0 0":"0 100%":0),k=Se.pinnedContainer=C.pinnedContainer&&(0,_Observer._getTarget)(C.pinnedContainer,Se),A=te&&Math.max(0,_triggers.indexOf(Se))||0,P=A;for(be&&_isObject(t)&&(f=gsap.getProperty(F,pe.p),h=gsap.getProperty(N,pe.p));P--;)(_=_triggers[P]).end||_.refresh(0,1)||(_refreshing=Se),!(c=_.pin)||c!==te&&c!==ie&&c!==k||_.isReverted||(g||(g=[]),g.unshift(_),_.revert(!0,!0)),_!==_triggers[P]&&(A--,P--);for(_isFunction(T)&&(T=T(Se)),T=_parseClamp(T,"start",Se),L=_parsePosition(T,te,v,pe,Pe(),D,F,Se,m,ye,he,b,_e,Se._startClamp&&"_startClamp")||(ie?-.001:0),_isFunction(x)&&(x=x(Se)),_isString(x)&&!x.indexOf("+=")&&(~x.indexOf(" ")?x=(_isString(T)?T.split(" ")[0]:"")+x:(S=_offsetToPx(x.substr(2),v),x=_isString(T)?T:(_e?gsap.utils.mapRange(0,_e.duration(),_e.scrollTrigger.start,_e.scrollTrigger.end,L):L)+S,O=te)),x=_parseClamp(x,"end",Se),M=Math.max(L,_parsePosition(x||(O?"100% 0":b),O,v,pe,Pe()+S,B,N,Se,m,ye,he,b,_e,Se._endClamp&&"_endClamp"))||-.001,S=0,P=A;P--;)(c=(_=_triggers[P]).pin)&&_.start-_._pinPush<=L&&!_e&&0<_.end&&(n=_.end-(Se._startClamp?Math.max(0,_.start):_.start),(c===te&&_.start-_._pinPush<L||c===k)&&isNaN(T)&&(S+=n*(1-_.progress)),c===ie&&(w+=n));if(L+=S,M+=S,Se._startClamp&&(Se._startClamp+=S),Se._endClamp&&!_refreshingAll&&(Se._endClamp=M||-.001,M=Math.min(M,_maxScroll(de,pe))),W=M-L||(L-=.01)&&.001,y&&(Ae=gsap.utils.clamp(0,1,gsap.utils.normalize(L,M,Q))),Se._pinPush=w,D&&S&&((n={})[pe.a]="+="+S,k&&(n[pe.p]="-="+Pe()),gsap.set([D,B],n)),!ie||_clampingMax&&Se.end>=_maxScroll(de,pe)){if(te&&Pe()&&!_e)for(o=te.parentNode;o&&o!==_body;)o._pinOffset&&(L-=o._pinOffset,M-=o._pinOffset),o=o.parentNode}else n=_getComputedStyle(ie),a=pe===_Observer._vertical,s=Pe(),X=parseFloat(Y(pe.a))+w,!b&&1<M&&(d={style:d=(fe?_doc.scrollingElement||_docEl:de).style,value:d["overflow"+pe.a.toUpperCase()]},fe&&"scroll"!==_getComputedStyle(_body)["overflow"+pe.a.toUpperCase()]&&(d.style["overflow"+pe.a.toUpperCase()]="scroll")),_swapPinIn(ie,U,n),q=_getState(ie),o=_getBounds(ie,!0),u=he&&(0,_Observer._getScrollFunc)(de,a?_Observer._horizontal:_Observer._vertical)(),ne?((K=[ne+pe.os2,W+w+_px]).t=U,(P=ne===_padding?_getSize(ie,pe)+W+w:0)&&(K.push(pe.d,P+_px),"auto"!==U.style.flexBasis&&(U.style.flexBasis=P+_px)),_setState(K),k&&_triggers.forEach(function(e){e.pin===k&&!1!==e.vars.pinSpacing&&(e._subPinOffset=!0)}),he&&Pe(Q)):(P=_getSize(ie,pe))&&"auto"!==U.style.flexBasis&&(U.style.flexBasis=P+_px),he&&((l={top:o.top+(a?s-L:u)+_px,left:o.left+(a?u:s-L)+_px,boxSizing:"border-box",position:"fixed"})[_width]=l["max"+_Width]=Math.ceil(o.width)+_px,l[_height]=l["max"+_Height]=Math.ceil(o.height)+_px,l[_margin]=l[_margin+_Top]=l[_margin+_Right]=l[_margin+_Bottom]=l[_margin+_Left]="0",l[_padding]=n[_padding],l[_padding+_Top]=n[_padding+_Top],l[_padding+_Right]=n[_padding+_Right],l[_padding+_Bottom]=n[_padding+_Bottom],l[_padding+_Left]=n[_padding+_Left],j=_copyState(V,l,le),_refreshingAll&&Pe(0)),R?(p=R._initted,_suppressOverwrites(1),R.render(R.duration(),!0,!0),G=Y(pe.a)-X+W+w,Z=1<Math.abs(W-G),he&&Z&&j.splice(j.length-2,2),R.render(0,!0,!0),p||R.invalidate(!0),R.parent||R.totalTime(R.totalTime()),_suppressOverwrites(0)):G=W,d&&(d.value?d.style["overflow"+pe.a.toUpperCase()]=d.value:d.style.removeProperty("overflow-"+pe.a));g&&g.forEach(function(e){return e.revert(!1,!0)}),Se.start=L,Se.end=M,E=I=_refreshingAll?Q:Pe(),_e||_refreshingAll||(E<Q&&Pe(Q),Se.scroll.rec=0),Se.revert(!1,!0),ke=_getTime(),J&&(Te=-1,J.restart(!0)),_refreshing=0,R&&ge&&(R._initted||ee)&&R.progress()!==ee&&R.progress(ee||0,!0).render(R.time(),!0,!0),(y||Ae!==Se.progress||_e||oe)&&(R&&!ge&&R.totalProgress(_e&&L<-.001&&!Ae?gsap.utils.normalize(L,M,0):Ae,!0),Se.progress=y||(E-L)/W===Ae?0:Ae),ie&&ne&&(U._pinOffset=Math.round(Se.progress*G)),$&&$.invalidate(),isNaN(f)||(f-=gsap.getProperty(F,pe.p),h-=gsap.getProperty(N,pe.p),_shiftMarker(F,pe,f),_shiftMarker(D,pe,f-(i||0)),_shiftMarker(N,pe,h),_shiftMarker(B,pe,h-(i||0))),y&&!_refreshingAll&&Se.update(),!re||_refreshingAll||H||(H=!0,re(Se),H=!1)}},Se.getVelocity=function(){return(Pe()-I)/(_getTime()-_time2)*1e3||0},Se.endAnimation=function(){_endAnimation(Se.callbackAnimation),R&&($?$.progress(1):R.paused()?ge||_endAnimation(R,Se.direction<0,1):_endAnimation(R,R.reversed()))},Se.labelToScroll=function(e){return R&&R.labels&&(L||Se.refresh()||L)+R.labels[e]/R.duration()*W||0},Se.getTrailing=function(r){var e=_triggers.indexOf(Se),t=0<Se.direction?_triggers.slice(0,e).reverse():_triggers.slice(e+1);return(_isString(r)?t.filter(function(e){return e.vars.preventOverlaps===r}):t).filter(function(e){return 0<Se.direction?e.end<=L:e.start>=M})},Se.update=function(e,r,t){if(!_e||t||e){var i,n,o,s,a,l,_,c=!0===_refreshingAll?Q:Se.scroll(),u=e?0:(c-L)/W,p=u<0?0:1<u?1:u||0,g=Se.progress;if(r&&(I=E,E=_e?Pe():c,ae&&(w=S,S=R&&!ge?R.totalProgress():p)),P&&ie&&!_refreshing&&!_startup&&_lastScrollTime&&(!p&&L<c+(c-I)/(_getTime()-_time2)*P?p=1e-4:1===p&&M>c+(c-I)/(_getTime()-_time2)*P&&(p=.9999)),p!==g&&Se.enabled){if(s=(a=(i=Se.isActive=!!p&&p<1)!==(!!g&&g<1))||!!p!=!!g,Se.direction=g<p?1:-1,Se.progress=p,s&&!_refreshing&&(n=p&&!g?0:1===p?1:1===g?2:3,ge&&(o=!a&&"none"!==me[n+1]&&me[n+1]||me[n],_=R&&("complete"===o||"reset"===o||o in R))),ue&&(a||_)&&(_||A||!R)&&(_isFunction(ue)?ue(Se):Se.getTrailing(ue).forEach(function(e){return e.endAnimation()})),ge||(!$||_refreshing||_startup?R&&R.totalProgress(p,!(!_refreshing||!ke&&!e)):($._dp._time-$._start!==$._time&&$.render($._dp._time-$._start),$.resetTo?$.resetTo("totalProgress",p,R._tTime/R._tDur):($.vars.totalProgress=p,$.invalidate().restart()))),ie)if(e&&ne&&(U.style[ne+pe.os2]=m),he){if(s){if(l=!e&&g<p&&c<M+1&&c+1>=_maxScroll(de,pe),le)if(e||!i&&!l)_reparent(ie,U);else{var d=_getBounds(ie,!0),f=c-L;_reparent(ie,_body,d.top+(pe===_Observer._vertical?f:0)+_px,d.left+(pe===_Observer._vertical?0:f)+_px)}_setState(i||l?j:q),Z&&p<1&&i||v(X+(1!==p||l?0:G))}}else v(_round(X+G*p));ae&&!z.tween&&!_refreshing&&!_startup&&J.restart(!0),T&&(a||se&&p&&(p<1||!_limitCallbacks))&&_toArray(T.targets).forEach(function(e){return e.classList[i||se?"add":"remove"](T.className)}),O&&!ge&&!e&&O(Se),s&&!_refreshing?(ge&&(_&&("complete"===o?R.pause().totalProgress(1):"reset"===o?R.restart(!0).pause():"restart"===o?R.restart(!0):R[o]()),O&&O(Se)),!a&&_limitCallbacks||(k&&a&&_callback(Se,k),ve[n]&&_callback(Se,ve[n]),se&&(1===p?Se.kill(!1,1):ve[n]=0),a||ve[n=1===p?1:3]&&_callback(Se,ve[n])),ce&&!i&&Math.abs(Se.getVelocity())>(_isNumber(ce)?ce:2500)&&(_endAnimation(Se.callbackAnimation),$?$.progress(1):_endAnimation(R,"reverse"===o?1:!p,1))):ge&&O&&!_refreshing&&O(Se)}if(y){var h=_e?c/_e.duration()*(_e._caScrollDist||0):c;b(h+(F._isFlipped?1:0)),y(h)}x&&x(-c/_e.duration()*(_e._caScrollDist||0))}},Se.enable=function(e,r){Se.enabled||(Se.enabled=!0,_addListener(de,"resize",_onResize),fe||_addListener(de,"scroll",_onScroll),we&&_addListener(Re,"refreshInit",we),!1!==e&&(Se.progress=Ae=0,E=I=Te=Pe()),!1!==r&&Se.refresh())},Se.getTween=function(e){return e&&z?z.tween:$},Se.setPositions=function(e,r,t,i){if(_e){var n=_e.scrollTrigger,o=_e.duration(),s=n.end-n.start;e=n.start+s*e/o,r=n.start+s*r/o}Se.refresh(!1,!1,{start:_keepClamp(e,t&&!!Se._startClamp),end:_keepClamp(r,t&&!!Se._endClamp)},i),Se.update()},Se.adjustPinSpacing=function(e){if(K&&e){var r=K.indexOf(pe.d)+1;K[r]=parseFloat(K[r])+e+_px,K[1]=parseFloat(K[1])+e+_px,_setState(K)}},Se.disable=function(e,r){if(Se.enabled&&(!1!==e&&Se.revert(!0,!0),Se.enabled=Se.isActive=!1,r||$&&$.pause(),Q=0,i&&(i.uncache=1),we&&_removeListener(Re,"refreshInit",we),J&&(J.pause(),z.tween&&z.tween.kill()&&(z.tween=0)),!fe)){for(var t=_triggers.length;t--;)if(_triggers[t].scroller===de&&_triggers[t]!==Se)return;_removeListener(de,"resize",_onResize),fe||_removeListener(de,"scroll",_onScroll)}},Se.kill=function(e,r){Se.disable(e,r),$&&!r&&$.kill(),a&&delete _ids[a];var t=_triggers.indexOf(Se);0<=t&&_triggers.splice(t,1),t===_i&&0<_direction&&_i--,t=0,_triggers.forEach(function(e){return e.scroller===Se.scroller&&(t=1)}),t||_refreshingAll||(Se.scroll.rec=0),R&&(R.scrollTrigger=null,e&&R.revert({kill:!1}),r||R.kill()),D&&[D,B,F,N].forEach(function(e){return e.parentNode&&e.parentNode.removeChild(e)}),_primary===Se&&(_primary=0),ie&&(i&&(i.uncache=1),t=0,_triggers.forEach(function(e){return e.pin===ie&&t++}),t||(i.spacer=0)),C.onKill&&C.onKill(Se)},_triggers.push(Se),Se.enable(!1,!1),o&&o(Se),R&&R.add&&!W){var Ce=Se.update;Se.update=function(){Se.update=Ce,L||M||Se.refresh()},gsap.delayedCall(.01,Se.update),W=.01,L=M=0}else Se.refresh();ie&&_queueRefreshAll()}else this.update=this.refresh=this.kill=_passThrough}}],[{key:"register",value:function(e){return _coreInitted||(gsap=e||_getGSAP(),_windowExists()&&window.document&&Re.enable(),_coreInitted=_enabled),_coreInitted}},{key:"defaults",value:function(e){if(e)for(var r in e)_defaults[r]=e[r];return _defaults}},{key:"disable",value:function(r,t){_enabled=0,_triggers.forEach(function(e){return e[t?"kill":"disable"](r)}),_removeListener(_win,"wheel",_onScroll),_removeListener(_doc,"scroll",_onScroll),clearInterval(_syncInterval),_removeListener(_doc,"touchcancel",_passThrough),_removeListener(_body,"touchstart",_passThrough),_multiListener(_removeListener,_doc,"pointerdown,touchstart,mousedown",_pointerDownHandler),_multiListener(_removeListener,_doc,"pointerup,touchend,mouseup",_pointerUpHandler),_resizeDelay.kill(),_iterateAutoRefresh(_removeListener);for(var e=0;e<_Observer._scrollers.length;e+=3)_wheelListener(_removeListener,_Observer._scrollers[e],_Observer._scrollers[e+1]),_wheelListener(_removeListener,_Observer._scrollers[e],_Observer._scrollers[e+2])}},{key:"enable",value:function(){if(_win=window,_doc=document,_docEl=_doc.documentElement,_body=_doc.body,gsap&&(_toArray=gsap.utils.toArray,_clamp=gsap.utils.clamp,_context=gsap.core.context||_passThrough,_suppressOverwrites=gsap.core.suppressOverwrites||_passThrough,_scrollRestoration=_win.history.scrollRestoration||"auto",_lastScroll=_win.pageYOffset,gsap.core.globals("ScrollTrigger",Re),_body)){_enabled=1,(_div100vh=document.createElement("div")).style.height="100vh",_div100vh.style.position="absolute",_refresh100vh(),_rafBugFix(),_Observer.Observer.register(gsap),Re.isTouch=_Observer.Observer.isTouch,_fixIOSBug=_Observer.Observer.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),_ignoreMobileResize=1===_Observer.Observer.isTouch,_addListener(_win,"wheel",_onScroll),_root=[_win,_doc,_docEl,_body],gsap.matchMedia?(Re.matchMedia=function(e){var r,t=gsap.matchMedia();for(r in e)t.add(r,e[r]);return t},gsap.addEventListener("matchMediaInit",function(){return _revertAll()}),gsap.addEventListener("matchMediaRevert",function(){return _revertRecorded()}),gsap.addEventListener("matchMedia",function(){_refreshAll(0,1),_dispatch("matchMedia")}),gsap.matchMedia("(orientation: portrait)",function(){return _setBaseDimensions(),_setBaseDimensions})):console.warn("Requires GSAP 3.11.0 or later"),_setBaseDimensions(),_addListener(_doc,"scroll",_onScroll);var e,r,t=_body.style,i=t.borderTopStyle,n=gsap.core.Animation.prototype;for(n.revert||Object.defineProperty(n,"revert",{value:function(){return this.time(-.01,!0)}}),t.borderTopStyle="solid",e=_getBounds(_body),_Observer._vertical.m=Math.round(e.top+_Observer._vertical.sc())||0,_Observer._horizontal.m=Math.round(e.left+_Observer._horizontal.sc())||0,i?t.borderTopStyle=i:t.removeProperty("border-top-style"),_syncInterval=setInterval(_sync,250),gsap.delayedCall(.5,function(){return _startup=0}),_addListener(_doc,"touchcancel",_passThrough),_addListener(_body,"touchstart",_passThrough),_multiListener(_addListener,_doc,"pointerdown,touchstart,mousedown",_pointerDownHandler),_multiListener(_addListener,_doc,"pointerup,touchend,mouseup",_pointerUpHandler),_transformProp=gsap.utils.checkPrefix("transform"),_stateProps.push(_transformProp),_coreInitted=_getTime(),_resizeDelay=gsap.delayedCall(.2,_refreshAll).pause(),_autoRefresh=[_doc,"visibilitychange",function(){var e=_win.innerWidth,r=_win.innerHeight;_doc.hidden?(_prevWidth=e,_prevHeight=r):_prevWidth===e&&_prevHeight===r||_onResize()},_doc,"DOMContentLoaded",_refreshAll,_win,"load",_refreshAll,_win,"resize",_onResize],_iterateAutoRefresh(_addListener),_triggers.forEach(function(e){return e.enable(0,1)}),r=0;r<_Observer._scrollers.length;r+=3)_wheelListener(_removeListener,_Observer._scrollers[r],_Observer._scrollers[r+1]),_wheelListener(_removeListener,_Observer._scrollers[r],_Observer._scrollers[r+2])}}},{key:"config",value:function(e){"limitCallbacks"in e&&(_limitCallbacks=!!e.limitCallbacks);var r=e.syncInterval;r&&clearInterval(_syncInterval)||(_syncInterval=r)&&setInterval(_sync,r),"ignoreMobileResize"in e&&(_ignoreMobileResize=1===Re.isTouch&&e.ignoreMobileResize),"autoRefreshEvents"in e&&(_iterateAutoRefresh(_removeListener)||_iterateAutoRefresh(_addListener,e.autoRefreshEvents||"none"),_ignoreResize=-1===(e.autoRefreshEvents+"").indexOf("resize"))}},{key:"scrollerProxy",value:function(e,r){var t=(0,_Observer._getTarget)(e),i=_Observer._scrollers.indexOf(t),n=_isViewport(t);~i&&_Observer._scrollers.splice(i,n?6:2),r&&(n?_Observer._proxies.unshift(_win,r,_body,r,_docEl,r):_Observer._proxies.unshift(t,r))}},{key:"clearMatchMedia",value:function(r){_triggers.forEach(function(e){return e._ctx&&e._ctx.query===r&&e._ctx.kill(!0,!0)})}},{key:"isInViewport",value:function(e,r,t){var i=(_isString(e)?(0,_Observer._getTarget)(e):e).getBoundingClientRect(),n=i[t?_width:_height]*r||0;return t?0<i.right-n&&i.left+n<_win.innerWidth:0<i.bottom-n&&i.top+n<_win.innerHeight}},{key:"positionInViewport",value:function(e,r,t){_isString(e)&&(e=(0,_Observer._getTarget)(e));var i=e.getBoundingClientRect(),n=i[t?_width:_height],o=null==r?n/2:r in _keywords?_keywords[r]*n:~r.indexOf("%")?parseFloat(r)*n/100:parseFloat(r)||0;return t?(i.left+o)/_win.innerWidth:(i.top+o)/_win.innerHeight}},{key:"killAll",value:function(e){if(_triggers.slice(0).forEach(function(e){return"ScrollSmoother"!==e.vars.id&&e.kill()}),!0!==e){var r=_listeners.killAll||[];_listeners={},r.forEach(function(e){return e()})}}}]),Re}();ScrollTrigger.version="3.12.5",ScrollTrigger.saveStyles=function(e){return e?_toArray(e).forEach(function(e){if(e&&e.style){var r=_savedStyles.indexOf(e);0<=r&&_savedStyles.splice(r,5),_savedStyles.push(e,e.style.cssText,e.getBBox&&e.getAttribute("transform"),gsap.core.getCache(e),_context())}}):_savedStyles},ScrollTrigger.revert=function(e,r){return _revertAll(!e,r)},ScrollTrigger.create=function(e,r){return new ScrollTrigger(e,r)},ScrollTrigger.refresh=function(e){return e?_onResize():(_coreInitted||ScrollTrigger.register())&&_refreshAll(!0)},ScrollTrigger.update=function(e){return++_Observer._scrollers.cache&&_updateAll(!0===e?2:0)},ScrollTrigger.clearScrollMemory=_clearScrollMemory,ScrollTrigger.maxScroll=function(e,r){return _maxScroll(e,r?_Observer._horizontal:_Observer._vertical)},ScrollTrigger.getScrollFunc=function(e,r){return(0,_Observer._getScrollFunc)((0,_Observer._getTarget)(e),r?_Observer._horizontal:_Observer._vertical)},ScrollTrigger.getById=function(e){return _ids[e]},ScrollTrigger.getAll=function(){return _triggers.filter(function(e){return"ScrollSmoother"!==e.vars.id})},ScrollTrigger.isScrolling=function(){return!!_lastScrollTime},ScrollTrigger.snapDirectional=_snapDirectional,ScrollTrigger.addEventListener=function(e,r){var t=_listeners[e]||(_listeners[e]=[]);~t.indexOf(r)||t.push(r)},ScrollTrigger.removeEventListener=function(e,r){var t=_listeners[e],i=t&&t.indexOf(r);0<=i&&t.splice(i,1)},ScrollTrigger.batch=function(e,r){var t,i=[],n={},o=r.interval||.016,s=r.batchMax||1e9,a=function(e,r){var t=[],i=[],n=gsap.delayedCall(o,function(){r(t,i),t=[],i=[]}).pause();return function(e){t.length||n.restart(!0),t.push(e.trigger),i.push(e),s<=t.length&&n.progress(1)}};for(t in r)n[t]="on"===t.substr(0,2)&&_isFunction(r[t])&&"onRefreshInit"!==t?a(0,r[t]):r[t];return _isFunction(s)&&(s=s(),_addListener(ScrollTrigger,"refresh",function(){return s=r.batchMax()})),_toArray(e).forEach(function(e){var r={};for(t in n)r[t]=n[t];r.trigger=e,i.push(ScrollTrigger.create(r))}),i};var _inputIsFocused,_clampScrollAndGetDurationMultiplier=function(e,r,t,i){return i<r?e(i):r<0&&e(0),i<t?(i-r)/(t-r):t<0?r/(r-t):1},_allowNativePanning=function e(r,t){!0===t?r.style.removeProperty("touch-action"):r.style.touchAction=!0===t?"auto":t?"pan-"+t+(_Observer.Observer.isTouch?" pinch-zoom":""):"none",r===_docEl&&e(_body,t)},_overflow={auto:1,scroll:1},_nestedScroll=function(e){var r,t=e.event,i=e.target,n=e.axis,o=(t.changedTouches?t.changedTouches[0]:t).target,s=o._gsap||gsap.core.getCache(o),a=_getTime();if(!s._isScrollT||2e3<a-s._isScrollT){for(;o&&o!==_body&&(o.scrollHeight<=o.clientHeight&&o.scrollWidth<=o.clientWidth||!_overflow[(r=_getComputedStyle(o)).overflowY]&&!_overflow[r.overflowX]);)o=o.parentNode;s._isScroll=o&&o!==i&&!_isViewport(o)&&(_overflow[(r=_getComputedStyle(o)).overflowY]||_overflow[r.overflowX]),s._isScrollT=a}(s._isScroll||"x"===n)&&(t.stopPropagation(),t._gsapAllow=!0)},_inputObserver=function(e,r,t,i){return _Observer.Observer.create({target:e,capture:!0,debounce:!1,lockAxis:!0,type:r,onWheel:i=i&&_nestedScroll,onPress:i,onDrag:i,onScroll:i,onEnable:function(){return t&&_addListener(_doc,_Observer.Observer.eventTypes[0],_captureInputs,!1,!0)},onDisable:function(){return _removeListener(_doc,_Observer.Observer.eventTypes[0],_captureInputs,!0)}})},_inputExp=/(input|label|select|textarea)/i,_captureInputs=function(e){var r=_inputExp.test(e.target.tagName);(r||_inputIsFocused)&&(e._gsapAllow=!0,_inputIsFocused=r)},_getScrollNormalizer=function(e){_isObject(e)||(e={}),e.preventDefault=e.isNormalizer=e.allowClicks=!0,e.type||(e.type="wheel,touch"),e.debounce=!!e.debounce,e.id=e.id||"normalizer";var i,o,l,n,s,_,c,a,r=e,u=r.normalizeScrollX,t=r.momentum,p=r.allowNestedScroll,g=r.onRelease,d=(0,_Observer._getTarget)(e.target)||_docEl,f=gsap.core.globals().ScrollSmoother,h=f&&f.get(),v=_fixIOSBug&&(e.content&&(0,_Observer._getTarget)(e.content)||h&&!1!==e.content&&!h.smooth()&&h.content()),m=(0,_Observer._getScrollFunc)(d,_Observer._vertical),b=(0,_Observer._getScrollFunc)(d,_Observer._horizontal),y=1,S=(_Observer.Observer.isTouch&&_win.visualViewport?_win.visualViewport.scale*_win.visualViewport.width:_win.outerWidth)/_win.innerWidth,w=0,x=_isFunction(t)?function(){return t(i)}:function(){return t||2.8},O=_inputObserver(d,e.type,!0,p),T=function(){return n=!1},k=_passThrough,A=_passThrough,P=function(){o=_maxScroll(d,_Observer._vertical),A=_clamp(_fixIOSBug?1:0,o),u&&(k=_clamp(0,_maxScroll(d,_Observer._horizontal))),l=_refreshID},C=function(){v._gsap.y=_round(parseFloat(v._gsap.y)+m.offset)+"px",v.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+parseFloat(v._gsap.y)+", 0, 1)",m.offset=m.cacheID=0},R=function(){P(),s.isActive()&&s.vars.scrollY>o&&(m()>o?s.progress(1)&&m(o):s.resetTo("scrollY",o))};return v&&gsap.set(v,{y:"+=0"}),e.ignoreCheck=function(e){return _fixIOSBug&&"touchmove"===e.type&&function(){if(n){requestAnimationFrame(T);var e=_round(i.deltaY/2),r=A(m.v-e);if(v&&r!==m.v+m.offset){m.offset=r-m.v;var t=_round((parseFloat(v&&v._gsap.y)||0)-m.offset);v.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+t+", 0, 1)",v._gsap.y=t+"px",m.cacheID=_Observer._scrollers.cache,_updateAll()}return!0}m.offset&&C(),n=!0}()||1.05<y&&"touchstart"!==e.type||i.isGesturing||e.touches&&1<e.touches.length},e.onPress=function(){n=!1;var e=y;y=_round((_win.visualViewport&&_win.visualViewport.scale||1)/S),s.pause(),e!==y&&_allowNativePanning(d,1.01<y||!u&&"x"),_=b(),c=m(),P(),l=_refreshID},e.onRelease=e.onGestureStart=function(e,r){if(m.offset&&C(),r){_Observer._scrollers.cache++;var t,i,n=x();u&&(i=(t=b())+.05*n*-e.velocityX/.227,n*=_clampScrollAndGetDurationMultiplier(b,t,i,_maxScroll(d,_Observer._horizontal)),s.vars.scrollX=k(i)),i=(t=m())+.05*n*-e.velocityY/.227,n*=_clampScrollAndGetDurationMultiplier(m,t,i,_maxScroll(d,_Observer._vertical)),s.vars.scrollY=A(i),s.invalidate().duration(n).play(.01),(_fixIOSBug&&s.vars.scrollY>=o||o-1<=t)&&gsap.to({},{onUpdate:R,duration:n})}else a.restart(!0);g&&g(e)},e.onWheel=function(){s._ts&&s.pause(),1e3<_getTime()-w&&(l=0,w=_getTime())},e.onChange=function(e,r,t,i,n){if(_refreshID!==l&&P(),r&&u&&b(k(i[2]===r?_+(e.startX-e.x):b()+r-i[1])),t){m.offset&&C();var o=n[2]===t,s=o?c+e.startY-e.y:m()+t-n[1],a=A(s);o&&s!==a&&(c+=a-s),m(a)}(t||r)&&_updateAll()},e.onEnable=function(){_allowNativePanning(d,!u&&"x"),ScrollTrigger.addEventListener("refresh",R),_addListener(_win,"resize",R),m.smooth&&(m.target.style.scrollBehavior="auto",m.smooth=b.smooth=!1),O.enable()},e.onDisable=function(){_allowNativePanning(d,!0),_removeListener(_win,"resize",R),ScrollTrigger.removeEventListener("refresh",R),O.kill()},e.lockAxis=!1!==e.lockAxis,((i=new _Observer.Observer(e)).iOS=_fixIOSBug)&&!m()&&m(1),_fixIOSBug&&gsap.ticker.add(_passThrough),a=i._dc,s=gsap.to(i,{ease:"power4",paused:!0,inherit:!1,scrollX:u?"+=0.1":"+=0",scrollY:"+=0.1",modifiers:{scrollY:_interruptionTracker(m,m(),function(){return s.pause()})},onUpdate:_updateAll,onComplete:a.vars.onComplete}),i};ScrollTrigger.sort=function(e){return _triggers.sort(e||function(e,r){return-1e6*(e.vars.refreshPriority||0)+e.start-(r.start+-1e6*(r.vars.refreshPriority||0))})},ScrollTrigger.observe=function(e){return new _Observer.Observer(e)},ScrollTrigger.normalizeScroll=function(e){if(void 0===e)return _normalizer;if(!0===e&&_normalizer)return _normalizer.enable();if(!1===e)return _normalizer&&_normalizer.kill(),void(_normalizer=e);var r=e instanceof _Observer.Observer?e:_getScrollNormalizer(e);return _normalizer&&_normalizer.target===r.target&&_normalizer.kill(),_isViewport(r.target)&&(_normalizer=r),r},ScrollTrigger.core={_getVelocityProp:_Observer._getVelocityProp,_inputObserver:_inputObserver,_scrollers:_Observer._scrollers,_proxies:_Observer._proxies,bridge:{ss:function(){_lastScrollTime||_dispatch("scrollStart"),_lastScrollTime=_getTime()},ref:function(){return _refreshing}}},_getGSAP()&&gsap.registerPlugin(ScrollTrigger);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,